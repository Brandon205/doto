{"version":3,"sources":["components/TaskRenderer.js","App.js"],"names":["TaskRenderer","useState","taskType","setTaskType","refreshing","setRefreshing","modalVisible","setModalVisible","editModalVisible","setEditModalVisible","currentData","setCurrentData","soonData","setSoonData","laterData","setLaterData","eventuallyData","setEventuallyData","title","onChangeTitle","desc","onChangeDesc","editTitle","onChangeEditTitle","editDesc","onChangeEditDesc","editId","setEditId","useEffect","getAllData","removeItem","itemId","removedIndex","dataCopy","i","length","id","splice","deleteTask","a","async","tempList","console","log","JSON","stringify","AsyncStorage","setItem","completeTask","itemTitle","itemDesc","createdDate","currentlyComplete","push","createdOn","complete","getItem","soonValue","parse","laterValue","eventuallyValue","onRefresh","React","useCallback","timeout","Promise","resolve","setTimeout","then","style","styles","container","onSwipeRight","gestureState","onSwipeLeft","View","topNav","Pressable","onPress","navButton","name","icon","size","color","Text","fontSize","tasksHeader","toUpperCase","createButton","onPressIn","Modal","animationType","transparent","visible","onRequestClose","centeredView","modalView","TextInput","value","onChangeText","placeholder","input","button","buttonClose","tempJson","uuid","Date","toDateString","addItem","padding","index","editItem","flex","width","FlatList","data","renderItem","completeOrNot","item","cardIcon","backgroundColor","card","cardTitle","hr","cardDesc","cardDate","editButtons","keyExtractor","refreshControl","RefreshControl","StyleSheet","create","display","minWidth","minHeight","alignItems","paddingBottom","top","flexDirection","justifyContent","marginTop","margin","borderRadius","shadowColor","shadowOffset","height","shadowOpacity","shadowRadius","elevation","borderWidth","marginLeft","marginRight","marginVertical","marginHorizontal","fontWeight","marginBottom","borderBottomColor","borderBottomWidth","paddingLeft","paddingRight","App","SafeAreaView","navBar"],"mappings":"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","file":"static/js/app.f4007177.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { View, Text, StyleSheet, Modal, TextInput, FlatList, Pressable, RefreshControl } from 'react-native';\r\nimport 'react-native-get-random-values';\r\nimport { v4 as uuid } from 'uuid';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport Icon from 'react-native-vector-icons/MaterialCommunityIcons';\r\nimport GestureRecognizer from 'react-native-swipe-gestures';\r\n\r\nconst wait = (timeout) => { // TODO: remove/edit to make this happen on start\r\n    return new Promise(resolve => setTimeout(resolve, timeout));\r\n}\r\n\r\nexport default function TaskRenderer() { // Renders the whole app and handles most of the app as well\r\n    const [taskType, setTaskType] = useState('');\r\n    const [refreshing, setRefreshing] = useState(false); // TODO: remove/edit to make this happen on start\r\n    const [modalVisible, setModalVisible] = useState(false);\r\n    const [editModalVisible, setEditModalVisible] = useState(false);\r\n    const [currentData, setCurrentData] = useState([]);\r\n    const [soonData, setSoonData] = useState([]);\r\n    const [laterData, setLaterData] = useState([]);\r\n    const [eventuallyData, setEventuallyData] = useState([]);\r\n    const [title, onChangeTitle] = useState(\"\");\r\n    const [desc, onChangeDesc] = useState(\"\");\r\n    const [editTitle, onChangeEditTitle] = useState(\"\");\r\n    const [editDesc, onChangeEditDesc] = useState(\"\");\r\n    const [editId, setEditId] = useState(\"\");\r\n\r\n    useEffect(() => { // This will get all of the data at the start when the app is opened and whenever a user switches screens\r\n        getAllData()\r\n        if (taskType === '') { // Should update data on initial render after content has been fetched\r\n            setTaskType('soon')\r\n        }\r\n\r\n        if (taskType === 'soon') {\r\n            setCurrentData(soonData)\r\n        } else if (taskType === 'later') {\r\n            setCurrentData(laterData)\r\n        } else if (taskType === 'eventually') {\r\n            setCurrentData(eventuallyData)\r\n        }\r\n    }, [taskType, currentData])\r\n\r\n    const renderItem = ({ item }) => { // For the FlatList component that renders each of the tasks based on what is in state (currentData)\r\n        let completeOrNot;\r\n        if (item.complete) {\r\n            completeOrNot = (<Icon name=\"close\" style={styles.cardIcon} size={35} color=\"#6800F4\" onPress={() => completeTask(item.id, item.title, item.desc, item.createdOn, item.complete)} />)\r\n        } else {\r\n            completeOrNot = (<Icon name=\"check\" style={styles.cardIcon} size={35} color=\"#6800F4\" onPress={() => completeTask(item.id, item.title, item.desc, item.createdOn, item.complete)} />)\r\n        }\r\n\r\n        return (\r\n            <View style={[{backgroundColor: item.complete ? '#00ff129e' : 'white'}, styles.card]}>\r\n                <Text style={styles.cardTitle}>{item.title}</Text>\r\n                <View style={styles.hr}></View>\r\n                <Text style={styles.cardDesc}>{item.desc}</Text>\r\n                <Text style={styles.cardDate }>{item.createdOn}</Text>\r\n                <View style={styles.editButtons}>\r\n                    <Icon name=\"file-edit\" style={styles.cardIcon} size={35} color=\"#6800F4\" onPress={() => { setEditModalVisible(true); onChangeEditTitle(item.title); onChangeEditDesc(item.desc); setEditId(item.id) } } />\r\n                    <Icon name=\"delete\" style={styles.cardIcon} size={35} color=\"#6800F4\" onPress={() => deleteTask(item.id)} />\r\n                    {completeOrNot}\r\n                </View>\r\n            </View>\r\n        )\r\n    }\r\n\r\n    const addItem = async () => { // Uses the data from the inputs that is stored in state to create a new task for the current taskType, and pushes that to Async storage\r\n        let tempJson = [];\r\n        let dataCopy;\r\n        if (taskType === 'soon') {\r\n            dataCopy = soonData\r\n            dataCopy.push({id: uuid(), title: title, desc: desc, createdOn: new Date().toDateString(), complete: false})\r\n            tempJson = JSON.stringify(dataCopy)\r\n        } else if (taskType === 'later') {\r\n            dataCopy = laterData\r\n            dataCopy.push({id: uuid(), title: title, desc: desc, createdOn: new Date().toDateString(), complete: false})\r\n            tempJson = JSON.stringify(dataCopy)\r\n        } else if (taskType === 'eventually') {\r\n            dataCopy = eventuallyData\r\n            dataCopy.push({id: uuid(), title: title, desc: desc, createdOn: new Date().toDateString(), complete: false})\r\n            tempJson = JSON.stringify(dataCopy)\r\n        }\r\n\r\n        setCurrentData(dataCopy)\r\n        onChangeTitle(\"\");\r\n        onChangeDesc(\"\");\r\n\r\n        try {\r\n            await AsyncStorage.setItem(taskType, tempJson)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    let removeItem = (itemId) => { // Will use the currentData from state to remove one of the items based on the itemId that is passed in (used in editItem() and removeItem())\r\n        let dataCopy = [...currentData]\r\n        let removedIndex; // For editItem() keeps track of where to splice updated data back into\r\n\r\n        for (let i = 0; i < dataCopy.length; i++) { // Loops through a copy of currentData and deletes the one that has the same itemId as the one that needs to be deleted\r\n            if (dataCopy[i].id === itemId) {\r\n                dataCopy.splice(i, 1)\r\n                removedIndex = i\r\n            }\r\n        }\r\n\r\n        return [dataCopy, removedIndex];\r\n    }\r\n\r\n    let editItem = async (itemId) => { // Use removeItem function, and then just add the item again with the same id and new details\r\n        let [tempList, index] = removeItem(itemId)\r\n\r\n        tempList.splice(index, 0, {id: itemId, title: editTitle, desc: editDesc, createdOn: new Date().toDateString(), complete: false})\r\n\r\n        // Setting the current data will update the state so that the items refresh\r\n        setCurrentData(tempList)\r\n        \r\n        // Clear editTitle and editDesc here\r\n        onChangeEditDesc(\"\");\r\n        onChangeEditTitle(\"\");\r\n\r\n        // Update the rest of the app with the new list of data\r\n        switch (taskType) { // Used to update the data that the useEffect hook will be setting to the currentData when the screens are changed\r\n            case \"soon\":\r\n                setSoonData(tempList);\r\n                break;\r\n            case \"later\":\r\n                setLaterData(tempList);\r\n                break;\r\n            case \"eventually\":\r\n                setEventuallyData(tempList);\r\n                break;\r\n            default:\r\n                console.log('Error setting state');\r\n        }\r\n\r\n        tempList = JSON.stringify(tempList)\r\n\r\n        try { // Update Async Storage\r\n            await AsyncStorage.setItem(taskType, tempList)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    let deleteTask = async (itemId) => { // Uses removeItem to get rid of the now deleted task, then updates the rest of the app with updated data (currentData, soon/later/eventuallyData, and AsyncStorage)\r\n        let [tempList] = removeItem(itemId)\r\n        setCurrentData(tempList)\r\n        \r\n        switch (taskType) { // Used to update the data that the UseEffect hook will be setting to the currentData when the screens are changed\r\n            case \"soon\":\r\n                setSoonData(tempList);\r\n                break;\r\n            case \"later\":\r\n                setLaterData(tempList);\r\n                break;\r\n            case \"eventually\":\r\n                setEventuallyData(tempList);\r\n                break;\r\n            default:\r\n                console.log('Error setting state');\r\n        }\r\n\r\n        tempList = JSON.stringify(tempList)\r\n\r\n        try { // Update Async Storage\r\n            await AsyncStorage.setItem(taskType, tempList)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    let completeTask = async (itemId, itemTitle, itemDesc, createdDate, currentlyComplete) => { // Completes a task by using removeItem(), then adding that same item to the end of the list with completed: true     \r\n        let [tempList] = removeItem(itemId)\r\n\r\n        tempList.push({id: itemId, title: itemTitle, desc: itemDesc, createdOn: createdDate, complete: !currentlyComplete})\r\n\r\n        // Setting the current data will update the state so that the items refresh\r\n        setCurrentData(tempList)\r\n\r\n        // Update the rest of the app with the rearranged list of data\r\n        switch (taskType) { // Used to update the data that the useEffect hook will be setting to the currentData when the screens are changed\r\n            case \"soon\":\r\n                setSoonData(tempList);\r\n                break;\r\n            case \"later\":\r\n                setLaterData(tempList);\r\n                break;\r\n            case \"eventually\":\r\n                setEventuallyData(tempList);\r\n                break;\r\n            default:\r\n                console.log('Error setting state');\r\n        }\r\n\r\n        tempList = JSON.stringify(tempList)\r\n\r\n        try { // Update Async Storage\r\n            await AsyncStorage.setItem(taskType, tempList)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    const getAllData = async () => { // Used in the useEffect hook to make sure the data is updated and accurate\r\n        try {\r\n            let soonValue = await AsyncStorage.getItem('soon')\r\n            if (soonValue !== null) {\r\n                setSoonData(JSON.parse(soonValue))\r\n            } else { // There is no currently stored soon data\r\n                setSoonData([])\r\n            }\r\n            let laterValue = await AsyncStorage.getItem('later')\r\n            if (laterValue !== null) {\r\n                setLaterData(JSON.parse(laterValue))\r\n            } else { // There is no currently stored later data\r\n                setLaterData([])\r\n            }\r\n            let eventuallyValue = await AsyncStorage.getItem('eventually')\r\n            if (eventuallyValue !== null) {\r\n                setEventuallyData(JSON.parse(eventuallyValue))\r\n            } else { // There is no currently stored eventually data\r\n                setEventuallyData([])\r\n            }\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    let scrollLeft = () => { // User wants page to go to the right (\"soon\" > \"later\")\r\n        if (taskType === 'soon') {\r\n            setTaskType('later');\r\n            setCurrentData(laterData);\r\n        } else if (taskType === 'later') {\r\n            setTaskType('eventually');\r\n            setCurrentData(eventuallyData);\r\n        }\r\n    }\r\n\r\n    let scrollRight = () => { // User wants page to go to the left (\"later\" > \"soon\")\r\n        if (taskType === 'later') {\r\n            setTaskType('soon');\r\n            setCurrentData(soonData);\r\n        } else if (taskType === 'eventually') {\r\n            setTaskType('later');\r\n            setCurrentData(laterData);\r\n        }\r\n    }\r\n\r\n    const onRefresh = React.useCallback(() => { // TODO: remove/edit to make this happen on start\r\n        setRefreshing(true);\r\n        setTaskType(taskType);\r\n        setCurrentData(currentData);\r\n        wait(1500).then(() => setRefreshing(false));\r\n      }, []);\r\n\r\n    return (\r\n        <GestureRecognizer style={styles.container} onSwipeRight={(gestureState) => scrollRight()} onSwipeLeft={(gestureState) => scrollLeft()}>\r\n            <View style={styles.topNav}>\r\n                <Pressable onPress={() => setTaskType(\"soon\")} style={styles.navButton}>\r\n                    <Icon name=\"clock-alert\" style={styles.icon} size={25} color={taskType === \"soon\" ? '#F2E6FF' : '#B98BF8'} />\r\n                    <Text style={{color: taskType === \"soon\" ? '#F2E6FF' : '#B98BF8', fontSize: 20}}>Soon</Text>\r\n                </Pressable>\r\n                <Pressable onPress={() => setTaskType(\"later\")} style={styles.navButton}>\r\n                    <Icon name=\"clock-time-four\" style={styles.icon} size={25} color={taskType === \"later\" ? '#F2E6FF' : '#B98BF8'} />\r\n                    <Text style={{color: taskType === \"later\" ? '#F2E6FF' : '#B98BF8', fontSize: 20}}>Later</Text>\r\n                </Pressable>\r\n                <Pressable onPress={() => setTaskType(\"eventually\")} style={styles.navButton}>\r\n                    <Icon name=\"clock-time-eight\" style={styles.icon} size={25} color={taskType === \"eventually\" ? '#F2E6FF' : '#B98BF8'} />\r\n                    <Text style={{color: taskType === \"eventually\" ? '#F2E6FF' : '#B98BF8', fontSize: 20}}>Eventually</Text>\r\n                </Pressable>\r\n            </View>\r\n            <Text style={styles.tasksHeader}>{taskType.toUpperCase()} TASKS</Text>\r\n            <Pressable style={styles.createButton} onPressIn={() => setModalVisible(!modalVisible)}>\r\n                <Icon name=\"plus\" style={styles.icon} size={25} color=\"#F2E6FF\" onPress={() => setModalVisible(!modalVisible)} />\r\n            </Pressable>\r\n            <Modal animationType=\"slide\" transparent={true} visible={modalVisible} onRequestClose={() => setModalVisible(!modalVisible)} >\r\n                <View style={styles.centeredView}>\r\n                    <View style={styles.modalView}>\r\n                        <Text>Add a new {taskType} task here</Text>\r\n                        <TextInput value={title} onChangeText={onChangeTitle} placeholder=\"Task name\" style={styles.input} />\r\n                        <TextInput value={desc} onChangeText={onChangeDesc} placeholder=\"Task description\" style={styles.input} />\r\n                        <Pressable style={[styles.button, styles.buttonClose]} onPress={() => {addItem(); setModalVisible(!modalVisible)}}>\r\n                            <Text style={{color: '#F2E6FF', padding: 5}}>Add Item</Text>\r\n                        </Pressable>\r\n                        <Pressable style={[styles.button, styles.buttonClose]} onPress={() => setModalVisible(!modalVisible)}>\r\n                            <Text style={{color: '#F2E6FF', padding: 5}}>Close</Text>\r\n                        </Pressable>\r\n                    </View>\r\n                </View>\r\n            </Modal>\r\n            <Modal animationType=\"slide\" transparent={true} visible={editModalVisible} onRequestClose={() => setEditModalVisible(!editModalVisible)} >\r\n                <View style={styles.centeredView}>\r\n                    <View style={styles.modalView}>\r\n                        <Text>Edit the task here</Text>\r\n                        <TextInput value={editTitle} onChangeText={onChangeEditTitle} placeholder=\"Task name\" style={styles.input} />\r\n                        <TextInput value={editDesc} onChangeText={onChangeEditDesc} placeholder=\"Task description\" style={styles.input} />\r\n                        <Pressable style={[styles.button, styles.buttonClose]} onPress={() => {editItem(editId); setEditModalVisible(!editModalVisible)}}>\r\n                            <Text style={{color: '#F2E6FF'}}>Save Changes</Text>\r\n                        </Pressable>\r\n                        <Pressable style={[styles.button, styles.buttonClose]} onPress={() => setEditModalVisible(!editModalVisible)}>\r\n                            <Text style={{color: '#F2E6FF'}}>Cancel</Text>\r\n                        </Pressable>\r\n                    </View>\r\n                </View>\r\n            </Modal>\r\n            <View style={{flex: 1, width: '100%'}}>\r\n                <FlatList data={currentData} renderItem={renderItem} keyExtractor={(item) => item.id} onRefresh={onRefresh} refreshing={refreshing} refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />} />\r\n            </View>\r\n        </GestureRecognizer>\r\n    )\r\n}\r\n\r\n// Original Colors: Purple: #6800F4, Gray: #B98BF8, Selected/White: #F2E6FF\r\nconst purple = \"#6800F4\"\r\nconst gray = \"#a3a3a3\"\r\n// const selectedWhite = \"#F2E6FF\"\r\n\r\nconst styles = StyleSheet.create({ // purple: #6800F4, gray: #B98BF8, selected/white: #F2E6FF\r\n    container: {\r\n        display: 'flex',\r\n        minWidth: '100%',\r\n        minHeight: '100%',\r\n        alignItems: 'center',\r\n        paddingBottom: 100\r\n    },\r\n    topNav: {\r\n        top: 0,\r\n        backgroundColor: purple,\r\n        width: '100%',\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-around',\r\n        alignItems: 'center',\r\n    },\r\n    navButton: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        width: 100\r\n    },\r\n    centeredView: {\r\n        flex: 1,\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        marginTop: 22\r\n      },\r\n    modalView: {\r\n        margin: 20,\r\n        backgroundColor: \"white\",\r\n        borderRadius: 20,\r\n        padding: 35,\r\n        alignItems: \"center\",\r\n        shadowColor: \"#000\",\r\n        shadowOffset: {\r\n            width: 0,\r\n            height: 2\r\n        },\r\n        shadowOpacity: 0.25,\r\n        shadowRadius: 4,\r\n        elevation: 5\r\n    },\r\n    createButton: {\r\n        backgroundColor: purple,\r\n        borderRadius: 25,\r\n        padding: 9\r\n    },  \r\n    tasksHeader: {\r\n        fontSize: 20,\r\n        padding: 12\r\n    }, \r\n    input: {\r\n        height: 40,\r\n        margin: 12,\r\n        borderWidth: 1,\r\n        padding: 10,\r\n    },\r\n    button: {\r\n        borderRadius: 20,\r\n        padding: 10,\r\n        elevation: 2,\r\n        backgroundColor: \"#2196F3\",\r\n        color: 'white',\r\n        marginTop: 10\r\n    },\r\n    card: {\r\n        marginLeft: 'auto',\r\n        marginRight: 'auto',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        width: '80%',\r\n        padding: 20,\r\n        elevation: 1,\r\n        shadowColor: '#000',\r\n        shadowOffset: {width: 2, height: 2},\r\n        shadowRadius: 6,\r\n        shadowOpacity: 0.5,\r\n        borderRadius: 15,\r\n        marginVertical: 8,\r\n        marginHorizontal: 8,\r\n        minWidth: 200\r\n    },\r\n    cardTitle: {\r\n        fontSize: 25,\r\n        fontWeight: 'bold',\r\n        marginBottom: 10\r\n    },\r\n    hr: {\r\n        width: '100%',\r\n        borderBottomColor: '#000',\r\n        borderBottomWidth: 1\r\n    },\r\n    cardDesc: {\r\n        fontSize: 18,\r\n        marginTop: 25,\r\n        marginBottom: 15\r\n    },  \r\n    cardDate: {\r\n        color: gray,\r\n        fontWeight: \"300\",\r\n        fontSize: 14,\r\n        marginBottom: 15,\r\n    },\r\n    cardIcon: {\r\n        paddingLeft: 20,\r\n        paddingRight: 20\r\n    },\r\n    icon: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n    },\r\n    editButtons: {\r\n        display: 'flex',\r\n        flex: 1,\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n    },\r\n    buttonClose: {\r\n        backgroundColor: purple,\r\n    }\r\n})\r\n","import React from 'react';\nimport { View, Text, StyleSheet, SafeAreaView } from 'react-native';\nimport TaskRenderer from './components/TaskRenderer';\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.navBar}>\n        <Text style={styles.name}>Doto</Text>\n      </View>\n      <TaskRenderer />\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    minHeight: '100%',\n  },\n  navBar: {\n    width: '100%',\n    alignItems: 'center',\n    backgroundColor: '#6800F4'\n  },\n  name: {\n    color: '#F2E6FF',\n    fontSize: 40,\n    fontWeight: 'bold',\n    padding: 5,\n    marginTop: 20\n  }\n})\n"],"sourceRoot":""}